/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Account;
import org.openapitools.model.CreateAccountRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-11T17:51:57.836378400+03:00[Europe/Moscow]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "account", description = "the account API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /account : Создать новый счёт
     *
     * @param createAccountRequest  (required)
     * @return Счёт успешно создан (status code 201)
     *         or Некорректный запрос (status code 400)
     */
    @Operation(
        operationId = "accountPost",
        summary = "Создать новый счёт",
        responses = {
            @ApiResponse(responseCode = "201", description = "Счёт успешно создан", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректный запрос")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Account> accountPost(
        @Parameter(name = "CreateAccountRequest", description = "", required = true) @Valid @RequestBody CreateAccountRequest createAccountRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ownerName\" : \"ownerName\", \"balance\" : 6.027456183070403, \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
